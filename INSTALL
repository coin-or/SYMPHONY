SYMPHONY Version 5.1 INSTALLATION
=================================

******************************************************************************
*   COMPILING The SYMPHONY Library and Executable (UNIX Operating Systems)   *
******************************************************************************

Here is a sketch outline of how to get started with SYMPHONY in Unix. These
instructions will lead you through the steps required to compile SYMPHONY as a
generic MILP solver. This process will create (1) a generic
callable library that allows SYMPHONY to be called from an application and (2)
an executable that can be used as a stand-alone application to solve MILPs
written in either MPS or GMPL file format. SYMPHONY can be further customized
by implementing one of more than 50 callback functions that change SYMPHONY's
default execution of its algorithm. For information on customizing SYMPHONY
using callbacks, a quick start guide is provided below.

Because SYMPHONY is intended to run over nonhomogeneous networks of
workstations, installation is not fully automated, but requires the user to
make minor edits to the configuration file. With this setup, compilation for 
multiple architectures and configurations can be performed in a single 
directory without reconfiguring or "cleaning". This is convenient on 
nonhomogeneous networks, but it means that you might need to edit the 
makefiles to get SYMPHONY to compile. For the casual user, this editing is 
limited to providing some path names.

PREPARING FOR COMPILATION
=========================

1. You can obtain the SYMPHONY source code either via the subversion 
repository or in the form of daily tarballs. 

The recommended method is to use subversion because it makes it easier to 
obtain updates. In a Unix-like environment (such as Linux or CYGWIN), 
the following command may be used to obtain SYMPHONY from 
source using SVN in most cases:

   svn checkout https://projects.coin-or.org/svn/SYMPHONY/trunk/ COIN-SYMPHONY

The alternative way is to get a daily snapshot of the source code as a tarball 
from  the download page of COIN-OR:

   http://www.coin-or.org/Tarballs/

2. If the code is obtained as a tarball, unpack the distribution with 
"tar -xzf SYMPHONY_XXX.tgz" where XXX is the date of the snapshot. This will 
create a subdirectory called SYMPHONY_XXX containing the distribution.

COMPILING FOR SEQUENTIAL VERSION
=================================

1. The user simply has to run 

   ./configure 

in the root directory COIN-SYMPHONY or SYMPHONY_XXX. This will set up 
the default configuration for SYMPHONY. If you want to override the 
default settings, run the configuration script with required options 
to reflect your environment. This usually involves specifying the LP solver 
to be used, assigning some variables and setting the paths to various 
libraries and include files. A list of options together with brief 
explanations can be seen both in the file 'share/config.site' and by typing  

   ./configure --help=recursive 

In order to enable or disable an option, either update the file 
'share/config.site' or add the option as an argument to configuration script. 
As an instance for the second case, running 

    ./configure --enable-debug

will set the configuration to compile the source files with debugging
flag. 

2. After configuring SYMPHONY, type 

   make

This will create the required libraries and binaries. In order to install 
SYMPHONY, type 

   make install

By default, the library 'libSym' and the executable 'symphony' will be 
installed to the 'lib/' and 'bin/' directories. 

3. The SYMPHONY library, together with the header files in the subdirectory 
include/, can then be used to call SYMPHONY from any C/C++ code. The API for 
this is described in the user's manual. On the other hand, the executable can 
be used for solving generic MILP problems in MPS format. In order to read 
GMPL files, you need to have the GLPK package and SYMPHONY has to be 
configured with 

  ./configure --with-gmpl --with-glpk-lib[=GLPK library] 
              --with-glpk-incdir[=GLPK include dir] 


FlopC++ can also be used to obtain a capability similar to ILOG's Concert 
technology for building math programming models 
(see SYMPHONY/Examples/FLOPC++). The configuration file can also be modified 
to enable parallel execution of the code (see below).

4. After the SYMPHONY library and the executable are compiled, you are free 
to type "make clean" if you want to save disk space. You should only have to 
remake the SYMPHONY library if you change something in SYMPHONY's 
internal files.

5. To test SYMPHONY, a sample MPS file called "sample.mps" and a sample 
GMPL/AMPL file called "sample.mod" together with its data file "sample.dat" are
included with the distribution. You can use either the command-line or the 
interactive optimizer. For the first option, use the "-F" 
command-line option to specify the file name and the "-D" for the data 
file name if the input is in GMPL/AMPL format, i.e., type 

   bin/symphony -F SYMPHONY/Datasets/sample.mps

or 

  bin/symphony -F SYMPHONY/Datasets/sample.mod -D SYMPHONY/Datasets/sample.dat

To obtain more MPS data files for further testing, download the MIPLIB library.

For the interactive optimizer, it is recommended to run the configuration 
script with 

  ./configure --enable-gnu-packages 

This will allow the interactive shell to be able to behave exactly like 
a Linux terminal command line, i.e., it will keep the history of the used 
commands, will complete the input word to possible commands, etc. Make sure
that you have the needed package (readline.h and history.h include files 
and their libraries) on the system files path. For this case, call the 
executable without any command-line arguments, i.e., type 

   bin/symphony 

and then type "help" or "?" to see a list of available commands.

6. That's it! Now you are ready to use SYMPHONY callable library or 
solve generic MILP problems through the executable.

COMPILING FOR SHARED MEMORY
===========================

1. To compile a shared memory version, obtain an OpenMP compliant compiler,
such as Omni (free from http://phase.etl.go.jp/Omni). Other options are listed
at http://www.openmp.org.

2. Follow the instructions above for modifying the configuration file. Set the
variable CC to the compiler name and compile as above. Note that if you have 
previously compiled the sequential version, then you should first type "make 
clean_all", as this version uses the same directories. With one thread allowed,
it should run exactly the same as the sequential version so there is no need 
to compile both versions.

3. Voila, you have a shared memory parallel solver! As above, test symphony,
using the sample MPS file called sample.mps included with the distribution. To
specify the file name, use the "-F" command-line option, i.e., type
"bin/symphony -F SYMPHONY/Datasets/sample.mps". To obtain more MPS data 
files for further testing, download the MIPLIB library.

4. That's it! Now, you are ready to develop your own application using 
SYMPHONY callable library or solve MILP problems using the executable. See the
user manual for help.

COMPILING FOR DISTRIBUTED NETWORKS
==================================

PLEASE NOTE THAT THE DISTRIBUTED MEMORY PARALLEL VERSION HAS NOT BEEN TESTED
IN VERSION 5.0 AND MAY BE BROKEN. PLEASE LET ME KNOW IF YOU WANT TO USE IT AND
I WILL GET IT WORKING.

1. If you wish to compile a distributed version of the code, obtain and
install PVM from http://www.csm.ornl.gov/pvm/.

2. While configuring, run 

   ./configure --with-pvm

Be sure that, you have PVM installed either in system path or PVM_ROOT
set as a bash environment variable. By default, configuration will assume
the following module dependencies: '--with-cg=yes --with-cp=yes --with-lp=no 
--with-tm=yes' (see the user manual or share/config.site for more info). 
If you configure with

   ./configure --with-pvm --with-lp=yes

then you will end up with the sequential version. Therefore, if you want 
to override the default set up, you must change one or more of module 
dependencies to false. 

3. As above, type 
  
    make 
    make install

in the root directory to make and install the distributed libraries. As in 
Step 1 of the sequential version, you may type "make clean" after making the 
library. It should not have to be remade again unless you modify SYMPHONY's 
internal files.

5. Make sure there are links from your '$PVM_ROOT/bin/$PVM_ARCH/' subdirectory 
to each of the executables in your 'bin/' directory. This is required by PVM.

6. Start the PVM daemon by typing "pvm" on the command line and then typing
"quit".

7. As above, test SYMPHONY using the sample MPS file called sample.mps included
with the distribution. To specify the file name, use the "-F" command-line
option, i.e., type 

   bin/symphony -F SYMPHONY/Datasets/sample.mps 

in the root directory. To obtain more MPS data files for further
testing, download the MIPLIB library.

4. That's it! Now, you are ready to develop your own application using 
SYMPHONY callable library or solve MILP problems using the executable. See the
user manual for help.

COMPILING FOR APPLICATIONS
==================================

See the INSTALL file of the corresponding application.  

******************************************************************************
*      COMPILING The SYMPHONY Library and Executable (Microsoft Windows)     *
******************************************************************************

Here is a sketch outline of how to compile SYMPHONY in Microsoft Windows.
These instructions will lead you through the steps required to compile
SYMPHONY as a generic MILP solver. This process will create (1) a generic
callable library that allows SYMPHONY to be called from an application and (2)
an executable that can be used as a stand-alone application to solve MILPs
written in either MPS or GMPL file format. SYMPHONY can be further customized
by implementing one of more than 50 callback functions that change SYMPHONY's
default execution of its algorithm. For information on customizing SYMPHONY
using callbacks, a quick start guide is provided below. Direct support
is provided for compilation under MS Visual Studio 6.0. Compilation for other
compilers should also be possible. Note that the Windows version has some
limitations. Detailed timing information is not currently provided.  Support
is only provided for running in sequential mode at this time.

First, download SYMPHONY and unpack the archive. You now
have two options. You can either compile on the command-line, using the MSVC++
makefile, SYMPHONY\src\WIN32\sym.mak, or you can use the provided projects and 
workspaces. Compiling on the command-line is somewhat easier since it requires 
only editing the makefile and typing a single command.

******************** Using the NMAKE Utility *********************************

1. Edit the SYMPHONY\src\WIN32\sym.mak makefile to reflect your environment. 
This involves specifying the LP solver to be used, assigning some variables 
and  setting various paths. Only minor edits should be required. An 
explanation of what has to be set is contained in the comments in the makefile.

2. The path to the COIN libraries, unless you want 
to use the included package, must be specified in the makefile.

3. With this version you will also be able to read GMPL/AMPL files by default. 
SYMPHONY now includes the parser files from Gnu Linear Programming Kit (GLPK).
If you don't want SYMPHONY to have this property, set the corresponding
variable in the makefile off.

4. Once configuration is done, type "nmake /f sym.mak" in the src\WIN32\ 
subdirectory. This will first make the SYMPHONY library (sequential version): 
src\WIN32\Debug\symphonyLib.lib. This library, together with the header files 
in include\, can then be used to call SYMPHONY from any C/C++ code. The API 
for calling SYMPHONY is described in the user's manual. After making 
the library, nmake will compile the default main() function to create an 
executable called 'symphony.exe', which can then be used to solve generic MILP 
problems in MPS or GMPL format. The executable will be created in the 
src\WIN32\Debug subdirectory.

5. To test the executable, type "symphony.exe -F ..\..\..\sample.mps" or
"symphony.exe -F ..\..\..\sample.mod -D ..\..\..\sample.dat" at a command
prompt from the src\WIN32\Debug subdirectory. If you want to use
the interactive optimizer, simply type  "symphony.exe" and then type "help" or 
"?" to see a list of available commands.
 
******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0,open the workspace src\WIN32\symphony.dsw. Note that
there are three projects: "symphony","symphonyLib" and "gmpl". The 
symphonyLib compiles the source code depending on the gmpl, which
is for the GLPK's necessary GMPL parser files, to create "symphonyLib.lib" and 
the symphony project compiles the main function and links that with the 
callable library to create the executable "symphony.exe". 

2. To use many of the new capabilities of SYMPHONY, you must have
the COIN project files. Specifically, you should have OSI, CGL, CLP and the 
Coin utilities (in the COIN/Coin subdirectory). These can be downloaded from 
www.coin-or.org or can be found in COIN/ subdirectory. If you don't want to 
use this included package then you will need to reload the needed COIN projects
to the workspace. 

3. By default, SYMPHONY is set to use the OSI CLP interface. To see this
check the following settings:

-- "__OSI_CLP__" is defined in the preprocessor definitions of both
"symphony" and "symphonyLib" projects (right-click on one of the projects, 
and then choose Settings --> C/C++ --> Preprocessor in the category drop-down 
menu).

-- Paths to the include files of COIN utilities (Coin), OSI, OSI CLP, and
CLP are specified in the same settings window. Note that, the Coin, OSI, 
OSI_CLP and CLP directories are
assumed to be in COIN\, i.e., COIN is assumed to be in SYMPHONY 
subdirectory. If it is not, make sure that you have set the correct paths in 
both projects before compiling.

-- The "symphony" project is dependent on the "symphonyLib", "coinLib", 
"osiLib", "osiClpLib", "clpLib" projects (see the dependencies in Project --> 
Dependencies). 

If you want to use the native CPLEX or OSL interface (without downloading COIN)
or a solver other than CLP:

-- If another OSI interface is to be used, change the preprocessor
definition in both projects from "__OSI_CLP__" to "__OSI_XXX__", where "XXX" 
is replaced by the desired solver's acronym ("__OSI_CPLEX__", "__OSI_GLPK__", 
"__OSI_OSL__", etc.). Otherwise, change it to either  "__CPLEX__" or "__OSL__" 
in both projects since SYMPHONY is only able to use CPLEX and OSL solvers  
directly.

-- Change the path definitions of the include files: for instance, if you want
to use "__OSI_CPLEX__", define "COIN\Osi\OsiCpx" and 
"C:\ILOG\cplex81\include\ilcplex" (assuming CPLEX is installed there) as the 
solver's header files path definitions or if you want to use "__OSI_OSL__", 
define "COIN\Osi\OsiOsl" and "C:\ProgramFiles\IbmOslV3Lib\osllib" 
(assuming OSL is installed there) instead of the OSI CLP and CLP path 
definitions. 

If you want to use the native CPLEX or OSL interface, delete all the path 
definitions (you are not required to have COIN or OSI), and just add the
path definitions for the CPLEX or OSL include files.

-- Add the appropriate projects and libraries. For instance, if you want to 
use "__OSI_OSL__", then add "osiOslLib" project to the workspace and 
"oslmd6030", OSL solver library, to the "symphony" project after deleting 
"osiClpLib" and "clpLib" projects. Update the dependencies. If you want to use 
the native OSL interface, then delete all the projects (except the 
"symphonyLib" and "gmpl") and just add the "oslmd6030" library for it is the 
unique solver library we need now.

4. By default, SYMPHONY is also set to use the COIN CGL library to
generate cuts. To use CGL, the workspace includes the "cglLib" project, the 
"symphonyLib" project has the "ADD_CGL_CUTS" preprocessor definition and the 
path to Cgl include directory, "COIN\Cgl\include" and the "symphony" project 
has a dependency on "cglLib". If you don't want to use the CGL library, 
reverse this procedure and delete the "cglLib" project from the workspace.

5. DO NOT CHANGE COMPILER DEFINES NOT RELATED TO THE LP SOLVER. Important note
for OSL users: when using OSL in Windows, you must also add "OSLMSDLL" to the
list of definitions.

6. Note that there are a number of additional preprocessor definitions that
control the functionality of SYMPHONY. These definitions are described in
"config", a Unix-style configuration file included in the distribution. To 
enable the functionality associated with a particular definition, simply add 
it to the list of definitions of "symphonyLib", as above.

7. You must also be sure to have any .dll files required for your LP solver to
be in your search path. Either move the required .dll to the subdirectory
containing symphony.exe or add the path to the "PATH" Windows environment
variable.

8. Once you have the proper settings for your LP solver, choose "Build
symphony.exe" from the Build menu. This should successfully build the
SYMPHONY library and the corresponding executable.

9. To test the executable, right click on the symphony project, go to the
"Debug" tab and set the program arguments to "-F ..\..\sample.mps" Note that
command-line switches are Unix-style. If you want to use the interactive 
optimizer, simply type  "symphony.exe" and then type "help" or "?" to see the 
list of available commands.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.
